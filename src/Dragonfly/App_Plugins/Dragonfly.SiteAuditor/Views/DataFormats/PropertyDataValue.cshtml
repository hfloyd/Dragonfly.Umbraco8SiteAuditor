@using System.Web;
@using System.Web.Mvc;
@using Umbraco.Core.Models;
@using Umbraco.Core.Models.PublishedContent;
@using Dragonfly.SiteAuditor.Models;

@model NodePropertyDataTypeInfo

@{
    NodePropertyDataTypeInfo nodePropertyDataTypeInfo = Model;
    IHtmlString formattedValue = new HtmlString("");
    var renderingDone = false;

    var editor = nodePropertyDataTypeInfo.DataType.EditorAlias;
    var dbType = nodePropertyDataTypeInfo.DataType.DatabaseType;

    //Special handling based on editor
    switch (editor)
    {
        case "Umbraco.NestedContent":
            Html.RenderPartial("/App_Plugins/Dragonfly.SiteAuditor/Views/DataFormats/NestedContent.cshtml", nodePropertyDataTypeInfo.Property);
            renderingDone = true;
            break;

        case "Our.Umbraco.NestedContent":
            Html.RenderPartial("/App_Plugins/Dragonfly.SiteAuditor/Views/DataFormats/NestedContent.cshtml", nodePropertyDataTypeInfo.Property);
            renderingDone = true;
            break;

        case "Umbraco.MultiNodeTreePicker":
            Html.RenderPartial("/App_Plugins/Dragonfly.SiteAuditor/Views/DataFormats/Mntp.cshtml", nodePropertyDataTypeInfo.Property);
            renderingDone = true;
            break;

        case "Umbraco.ContentPicker":
            Html.RenderPartial("/App_Plugins/Dragonfly.SiteAuditor/Views/DataFormats/ContentPicker.cshtml", nodePropertyDataTypeInfo.Property);
            renderingDone = true;
            break;

        case "Tags":
            Html.RenderPartial("/App_Plugins/Dragonfly.SiteAuditor/Views/DataFormats/Tags.cshtml", nodePropertyDataTypeInfo.Property);
            renderingDone = true;
            break;

        case "Umbraco.MediaPicker":
            var mediaImageVdd = new ViewDataDictionary();
            mediaImageVdd.Add("ImageWidth", 300);

            Html.RenderPartial("/App_Plugins/Dragonfly.SiteAuditor/Views/DataFormats/MediaIPub.cshtml", nodePropertyDataTypeInfo.Property.GetValue(), mediaImageVdd);
            <div><small>[@nodePropertyDataTypeInfo.Property.GetValue().ToString()]</small></div>
            renderingDone = true;
            break;

        case "Umbraco.MediaPicker2":
            var mediaImageVdd2 = new ViewDataDictionary();
            mediaImageVdd2.Add("ImageWidth", 300);

            Html.RenderPartial("/App_Plugins/Dragonfly.SiteAuditor/Views/DataFormats/MediaIPub.cshtml", nodePropertyDataTypeInfo.Property.GetValue(), mediaImageVdd2);
            <div><small>[@nodePropertyDataTypeInfo.Property.GetValue().ToString()]</small></div>

            renderingDone = true;
            break;

        case "Umbraco.MediaPicker3":
            var mediaImageVdd3 = new ViewDataDictionary();
            mediaImageVdd3.Add("ImageWidth", 300);

            Html.RenderPartial("/App_Plugins/Dragonfly.SiteAuditor/Views/DataFormats/MediaWithCrops.cshtml", nodePropertyDataTypeInfo.Property.GetValue(), mediaImageVdd3);
            <div><small>[@nodePropertyDataTypeInfo.Property.GetValue().ToString()]</small></div>

            renderingDone = true;
            break;

    }

    //If we get here, handle based on DB type
    if (!renderingDone)
    {
        switch (dbType)
        {
            case ValueStorageType.Date:
                Html.RenderPartial("/App_Plugins/Dragonfly.SiteAuditor/Views/DataFormats/DateValue.cshtml", nodePropertyDataTypeInfo.Property.GetValue());
                renderingDone = true;
                break;

            //case ValueStorageType.Decimal:
            //    formattedValue = new HtmlString(nodePropertyDataTypeInfo.Property.GetValue().ToString());
            //    break;

            //case ValueStorageType.Integer:
            //    formattedValue = new HtmlString(nodePropertyDataTypeInfo.Property.GetValue().ToString());
            //    break;

            //case ValueStorageType.Nvarchar:
            //    formattedValue = new HtmlString(nodePropertyDataTypeInfo.Property.GetValue().ToString());
            //    break;

            //case ValueStorageType.Ntext:
            //    formattedValue = new HtmlString(nodePropertyDataTypeInfo.Property.GetValue().ToString());
            //    break;

            default:
                //Default rendering
                <span>@nodePropertyDataTypeInfo.Property.GetValue()</span>
                renderingDone = true;
                break;
        }

    }
}
